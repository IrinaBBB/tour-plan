*{box-sizing:border-box}body{font-family:Mulish,sans-serif;color:#333}.container{max-width:1110px;margin:auto}img{max-width:100%}/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}.navbar{background-color:#fff}.navbar-top{display:flex;align-items:center;justify-content:space-between;padding-top:40px;padding-bottom:40px}.navbar-top__menu-button{display:none}.navbar__search{margin-right:auto;margin-left:108px}.navbar-bottom{background-color:#0a223d}.navbar-menu{list-style:none;margin:0;padding:31px 0;display:flex;align-items:center;justify-content:space-between;color:#fff}.navbar-menu__link{color:inherit;text-decoration:none;text-transform:uppercase;font-size:14px;line-height:18px}.logo{width:177px}.search{display:flex;position:relative;overflow:hidden;border-radius:6px;height:40px}.search__input{width:350px;height:100%;padding-left:23px;padding-right:75px;background-color:#f5fafe;border:none;font-size:12px;line-height:15;color:#333}.search__input:focus{outline:0}.search__button{position:absolute;top:0;right:0;width:65px;height:100%;border:none;background-color:#ec1f46}.user{display:flex;align-items:center;text-decoration:none}.user__avatar{width:40px;height:40px;border-radius:50%;-o-object-fit:cover;object-fit:cover}.user__name{padding-left:18px;font-size:14px;line-height:18px;color:#333}@media (max-width:1200px){.container{max-width:960px}}@media (max-width:992px){.container{max-width:700px}.logo{width:132px}.navbar-top{padding-top:30px;padding-bottom:30px}.navbar__search{margin-left:auto}.navbar-menu{padding-top:22px;padding-bottom:22px}.navbar__link{font-size:12px;line-height:15px}.search__input{width:340px}}@media (max-width:768px){.container{max-width:576px;width:92%}.navbar-menu,.navbar__search,.navbar__user{display:none}.menu-button{width:16px;height:11px;padding:0;display:flex;align-items:center;justify-content:space-between;flex-direction:column;border:none;background-color:#fff;cursor:pointer}.menu-button__line{width:16px;height:1px;background-color:#333}}@media (max-width:576px){.logo{width:99px}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
